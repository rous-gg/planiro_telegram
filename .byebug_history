q
project_name
project['id']
project
n
project_number
n
task_title
n
q
project['name']
project              = last_command_replies[SystemMessages::SELECT_PROJECT].extra[project_number - 1]
project
q
HISTORY.last_command_replies(user_id)
pp HISTORY.last_command_replies(user_id)
puts HISTORY.last_command_replies(user_id)
pp HISTORY.last_command_replies(user_id)
HISTORY.last_command_replies(user_id)
HISTORY.last_command_replies(user_id).keys
HISTORY.last_command_replies(user_id).last
HISTORY.last_command_replies(user_id)
HISTORY.last_command_replies(user_id).keys
HISTORY.last_command_replies(user_id)
message.text
q
HISTORY.last_command_replies(user_id).keys
HISTORY.last_command_replies(user_id).size
HISTORY.last_command_replies(user_id)
q
last_command_replies.keys
last_command_replies.size
last_command_replies
c
q
contract.call.get_user_projects(2)
contract.call.get_user_projects(1)
contract.transact.add_member_to_project(1, 2)
contract.transact.new_project(1, 1)
contract.call.get_user_projects(1)
contract.transact.get_user_projects(1)
q
contract.transact.add_member_to_project(1,2)
project(1)
contract.transact.set_balance(12, 22)
contract.transact.new_project(1, 2)
q
contract.transact.new_project(1, 2)
q
contract.transact.new_project(1)
q
contract.transact.new_project(1)
contract.transact.methods.grep /bal/
contract.transact.methods.grep /proj/i
contract.transact.methods
contract.transact
contract.transact.newProject(1)
c
abi
constructor
n
s
q
inputs
args
s
@constructor_inputs
params
paams
q
a.id
a= contract.deploy("Hello from ethereum.rb!")
address
n
q
puts address
n
q
send_single(payload.to_json)
payload.to_json
n
command
s
address
addresss
eth_get_transaction_count(address)["result"]
=> 76:       
n
Utils.public_key_to_address public_hex
public_hex
s
n
s
n
s
n
s
n
s
c
n
s
params
s
key
s
params
n
s
args
s
address = contract.deploy_and_wait("Hello from ethereum.rb!")
contract.key
key
q
key = Eth::Key.new(priv: '50cb75037145b5ad9a71bead7dc0e7222cf3421a318d8899d6087160b4ebe779')
key = Eth::Key.new('50cb75037145b5ad9a71bead7dc0e7222cf3421a318d8899d6087160b4ebe779')
key.private_hex
key = Eth::Key.new
key
c
tx_args
n
s
sender
s
send_transaction(deploy_args(params))
params
n
key
s
n
s
n
s
c
n
s
n
s
q
address = contract.deploy_and_wait("Hello from ethereum.rb!")q
address = contract.deploy_and_wait("Hello from ethereum.rb!")
contract.deploy_and_wait("Allo Allo!", timeout: 500)
contract.deploy_and_wait("Allo Allo!")
contract.deploy_and_wait('my_contract')
contract.deploy_and_wait
contrat.deploy_and_wait
contract.key = key
contract = Ethereum::Contract.create(client: client, file: 'test_contract.sol')
contract = Ethereum::Contract.create(client: client, file: 'tests_contract.sol')
client = Ethereum::HttpClient.new('http://hackaton.izx.io:18555')
client
contract = Ethereum::Contract.create(client: client, file: 'test_contract.sol')
key = Eth::Key.new
require 'eth'
q
require 'eth'
require 'ruby-eth'
require 'eth'
contract.key = key
key = Eth::Key.new
contract.deploy_and_wait("Allo Allo!")
contract.key
client.eth_gas_price 
contract.deploy_and_wait
contract = Ethereum::Contract.create(client: client, file: 'test_contract.sol')
contract.deploy_and_wait
contract = Ethereum::Contract.create(client: client, file: 'test_contract.sol')
contract.deploy_and_wait
contract.deploy_and_wait('test')
contract.deploy_and_wait
contract = Ethereum::Contract.create(client: client, file: 'test_contract.sol')
Ethereum::Contract.create(client: client, file: 'test_contract.sol')
Ethereum::Contract.create(client: client, file: 'tests_contract.sol')
client = Ethereum::HttpClient.new('http://hackaton.izx.io:18555')
client.eth_gas_price
client = Ethereum::HttpClient.new('http://hackaton.izx.io:18556')
client.eth_gas_price
client = Ethereum::HttpClient.new('http://hackaton.izx.io:18555')
q
Oj.load(data).first
Oj.load(data)
data
n
data
n
s
project_name         = last_command_replies[SystemMessages::TYPE_PROJECT_NAME].message
last_command_replies[SystemMessages::TYPE_PROJECT_NAME]
last_command_replies[SystemCommands::TYPE_PROJECT_NAME]
last_command_replies[UserCommands::TYPE_PROJECT_NAME]
last_command_replies[UserCommands::TYPE_PROJECT_NAME].message
last_command_replies[UserCommands::NEW_PROJECT]
owner_id
flow_id
project_name
q
last_command_replies[SystemMessages::SELECT_FLOW].extra
flow_number
q
flow_id
data
q
last_command_replies.keys.size
last_command_replies.keys
q
last_command_replies[SystemMessages::SELECT_FLOW]
flow_number
n
q
last_command_replies[SystemMessages::SELECT_FLOW]
last_command_replies[SystemMessages::SELECT_FLOW].extra
last_command_replies[SystemMessages::SELECT_FLOW].extra[flow_number - 1]
flow_number
n
last_command_replies.size
n
q
last_command_replies.keys
last_command_replies.size
last_command_replies
q
user_ids
data['users']
users
q
user_id
q
action.message == SystemMessages::TYPE_PROJECT_NAME
action.message
action.type == History::SYSTEM_MESSAGE
q
HISTORY.prev_action(user_id)
action
n
q
n
s
message.text
q
HISTORY.history[user_id][-1]
HISTORY.prev_action(user_id)
l=
HISTORY.history[1].size
HISTORY.history[1]
HISTORY.history.keys
HISTORY.history[1]
HISTORY.history.keys
HISTORY.history
HISTORY
s
c
q
HISTORY
action
