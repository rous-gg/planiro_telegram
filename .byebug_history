q
Oj.load(data).first
Oj.load(data)
data
n
data
n
s
project_name         = last_command_replies[SystemMessages::TYPE_PROJECT_NAME].message
last_command_replies[SystemMessages::TYPE_PROJECT_NAME]
last_command_replies[SystemCommands::TYPE_PROJECT_NAME]
last_command_replies[UserCommands::TYPE_PROJECT_NAME]
last_command_replies[UserCommands::TYPE_PROJECT_NAME].message
last_command_replies[UserCommands::NEW_PROJECT]
owner_id
flow_id
project_name
q
last_command_replies[SystemMessages::SELECT_FLOW].extra
flow_number
q
flow_id
data
q
last_command_replies.keys.size
last_command_replies.keys
q
last_command_replies[SystemMessages::SELECT_FLOW]
flow_number
n
q
last_command_replies[SystemMessages::SELECT_FLOW]
last_command_replies[SystemMessages::SELECT_FLOW].extra
last_command_replies[SystemMessages::SELECT_FLOW].extra[flow_number - 1]
flow_number
n
last_command_replies.size
n
q
last_command_replies.keys
last_command_replies.size
last_command_replies
q
user_ids
data['users']
users
q
user_id
q
action.message == SystemMessages::TYPE_PROJECT_NAME
action.message
action.type == History::SYSTEM_MESSAGE
q
HISTORY.prev_action(user_id)
action
n
q
n
s
message.text
q
HISTORY.history[user_id][-1]
HISTORY.prev_action(user_id)
l=
HISTORY.history[1].size
HISTORY.history[1]
HISTORY.history.keys
HISTORY.history[1]
HISTORY.history.keys
HISTORY.history
HISTORY
s
c
q
HISTORY
action
n
s
operation_detector.waiting_for_type_project_name?(user_id)
q
organization
organization['projects']
organization['projects'].select {|pr| !pr['archived']}
organization
n
q
RestClient.get("#{SITE_URL}#{path}", params: params.merge(access_token: @access_token))
params.merge(access_token: @access_token)
params.merge(access_token: @access_token
q
self.class.methods.grep /cons/
q
Command.new(name, description)
